apiVersion: v1
kind: Namespace
metadata:
  name: ${KUBE_NAMESPACE}
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: prometheus-meta
  namespace: ${KUBE_NAMESPACE}
  labels:
    app: prometheus-meta
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
      prometheus: meta
  template:
    metadata:
      labels:
        app: prometheus
        prometheus: meta
    spec:
      serviceAccount: prometheus
      securityContext:
        runAsUser: 0
      containers:
      - name: prometheus
        image: gcr.io/prometheus-to-sd/prometheus:freinartz
        imagePullPolicy: Always
        args:
        - "--config.file=/etc/prometheus/config/prometheus.yaml"
        - "--storage.tsdb.path=/data"
        - "--storage.tsdb.min-block-duration=15m"
        - "--storage.tsdb.max-block-duration=4h"
        - "--storage.tsdb.retention=48h"
        ports:
        - name: prometheus
          containerPort: 9090
        volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus/config
        - name: data-volume
          mountPath: /data
      - name: sidecar
        image: gcr.io/prometheus-to-sd/stackdriver-prometheus-sidecar:freinartz
        imagePullPolicy: Always
        args:
        - "--stackdriver.project-id=${GCP_PROJECT}"
        - "--prometheus.wal-directory=/data/wal"
        - "--stackdriver.global-label=_kubernetes_location=${GCP_REGION}"
        - "--stackdriver.global-label=_kubernetes_cluster_name=${KUBE_CLUSTER}"
        ports:
        - name: sidecar
          containerPort: 9091
        volumeMounts:
        - name: data-volume
          mountPath: /data
      volumes:
      - name: config-volume
        configMap:
          name: prometheus-meta
      - name: data-volume
        emptyDir: {}
      terminationGracePeriodSeconds: 300
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-meta
  namespace: ${KUBE_NAMESPACE}
data:
  prometheus.yaml: |
    global:
      scrape_interval: 10s
    scrape_configs:
    - job_name: 'prometheus'
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: ${KUBE_NAMESPACE}
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: prometheusloadtest
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: ${KUBE_NAMESPACE}
